<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:p="http://www.springframework.org/schema/p"  
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xsi:schemaLocation="  
      http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/tx  
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">  
      <!--（1）如果你有多个数据源需要通过<context:property-placeholder管理，且不愿意放在一个配置文件里，那么一定要加上ignore-unresolvable=“true"--> 
      <context:property-placeholder location="classpath:resources/redis.properties" ignore-unresolvable="true"/>
      <!--（2）注意新版的（具体从哪个版本开始不清楚，有兴趣可以查一下）JedisPoolConfig的property name，不是maxActive而是maxTotal，而且没有maxWait属性，建议看一下Jedis源码。-->  
      <!-- redis连接池 -->
      <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
      	<property name="maxTotal" value="${redis.maxActive}"/>
      	<property name="maxIdle" value="${redis.maxIdle}"/>
      	<property name="maxWaitMillis" value="${redis.maxWait}"/>
      	<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
      </bean>
         <bean id="clusterRedisNodes1"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port1}" type="int" />
     	</bean>
     	<bean id="clusterRedisNodes2"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port2}" type="int" />
     	</bean>
     	<bean id="clusterRedisNodes3"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port3}" type="int" />
     	</bean>
     	<bean id="clusterRedisNodes4"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port4}" type="int" />
     	</bean>
     	<bean id="clusterRedisNodes5"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port5}" type="int" />
     	</bean>
     	<bean id="clusterRedisNodes6"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="${redis.host.master}" />
            <constructor-arg value="${redis.port6}" type="int" />
     	</bean>
     <bean id="redisClusterConfiguration"   class="org.springframework.data.redis.connection.RedisClusterConfiguration">
       <property name="clusterNodes">
               <set>
                    <ref bean="clusterRedisNodes1"/>
                    <ref bean="clusterRedisNodes2"/>
                    <ref bean="clusterRedisNodes3"/>
                    <ref bean="clusterRedisNodes4"/>
                    <ref bean="clusterRedisNodes5"/>
                    <ref bean="clusterRedisNodes6"/>
              </set>
       </property>
     <!--红色所示部分在从gitHub上获取的jar包中无对应setter方法，因此需要修改其对应的源码。
         另外，如果不设置clusterTimeOut值，源码中默认为2S。当集群服务器与客户端不在同一服务器上时，容易报：Could not get a resource from the Cluster;
                   如果不设置maxRedirects值，源码中默认为5。一般当此值设置过大时，容易报：Too many Cluster redirections -->
        <property name="maxRedirects"   value="${redis.cluster.maxredirects}" />
    </bean>

     <bean id="jedisConnFactory"   class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true">
           <constructor-arg ref="redisClusterConfiguration" />
           <constructor-arg ref="jedisPoolConfig" />
  </bean>

	<!-- redis操作模板，这里采用尽量面向对象的模板 -->  
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory"/>
		<!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->  
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
		</property>
		<!-- 开启事务 -->
		<property name="enableTransactionSupport" value="true"></property>
	</bean>      
	
      </beans>